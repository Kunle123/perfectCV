name: Deploy PerfectCV

on:
  push:
    branches: [CandidateV]
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy frontend to Vercel'
        required: true
        default: true
        type: boolean
      deploy_backend:
        description: 'Deploy backend to Railway'
        required: true
        default: true
        type: boolean

jobs:
  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event.inputs.deploy_backend == 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Railway CLI
        run: npm install -g @railway/cli
        
      - name: Deploy to Railway
        working-directory: ./backend
        run: railway up
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Get Railway URL
        id: railway-url
        working-directory: ./backend
        run: |
          RAILWAY_URL=$(railway variables get RAILWAY_PUBLIC_URL)
          echo "RAILWAY_URL=${RAILWAY_URL}" >> $GITHUB_OUTPUT
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          
      - name: Update Deployment Status
        run: echo "Backend deployed to ${{ steps.railway-url.outputs.RAILWAY_URL }}"

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: ${{ github.event_name == 'push' || github.event.inputs.deploy_frontend == 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Dependencies
        working-directory: ./frontend
        run: npm install
        
      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_API_URL: /api
          VITE_APP_NAME: PerfectCV
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_STRIPE_PUBLIC_KEY: ${{ secrets.VITE_STRIPE_PUBLIC_KEY }}
          
      - name: Update Vercel Configuration
        working-directory: ./frontend
        run: |
          RAILWAY_URL="${{ needs.deploy-backend.outputs.RAILWAY_URL || secrets.RAILWAY_PUBLIC_URL }}"
          if [ -n "$RAILWAY_URL" ]; then
            # Create or update vercel.json with the correct Railway URL
            cat > vercel.json << EOF
          {
            "rewrites": [
              {
                "source": "/api/:path*",
                "destination": "${RAILWAY_URL}/api/:path*"
              },
              {
                "source": "/(.*)",
                "destination": "/index.html"
              }
            ],
            "headers": [
              {
                "source": "/(.*)",
                "headers": [
                  { "key": "Access-Control-Allow-Credentials", "value": "true" },
                  { "key": "Access-Control-Allow-Origin", "value": "${{ secrets.VERCEL_DEPLOYMENT_URL || '*' }}" },
                  { "key": "Access-Control-Allow-Methods", "value": "GET,OPTIONS,PATCH,DELETE,POST,PUT" },
                  { "key": "Access-Control-Allow-Headers", "value": "X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, Authorization" }
                ]
              }
            ]
          }
          EOF
          fi
          
      - name: Install Vercel CLI
        run: npm install -g vercel
        
      - name: Deploy to Vercel
        working-directory: ./frontend
        run: vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }} --yes
